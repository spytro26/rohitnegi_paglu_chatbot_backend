/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ElevenLabs from "../../../index";
import { Resource } from "../resources/resource/client/Client";
import { Audio } from "../resources/audio/client/Client";
import { Transcript } from "../resources/transcript/client/Client";
export declare namespace Dubbing {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | environments.ElevenLabsEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Dubbing {
    protected readonly _options: Dubbing.Options;
    protected _resource: Resource | undefined;
    protected _audio: Audio | undefined;
    protected _transcript: Transcript | undefined;
    constructor(_options?: Dubbing.Options);
    get resource(): Resource;
    get audio(): Audio;
    get transcript(): Transcript;
    /**
     * Dubs a provided audio or video file into given language.
     *
     * @param {ElevenLabs.BodyDubAVideoOrAnAudioFileV1DubbingPost} request
     * @param {Dubbing.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.dubbing.create({})
     */
    create(request: ElevenLabs.BodyDubAVideoOrAnAudioFileV1DubbingPost, requestOptions?: Dubbing.RequestOptions): core.HttpResponsePromise<ElevenLabs.DoDubbingResponse>;
    private __create;
    /**
     * Returns metadata about a dubbing project, including whether it's still in progress or not
     *
     * @param {string} dubbingId - ID of the dubbing project.
     * @param {Dubbing.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.dubbing.get("dubbing_id")
     */
    get(dubbingId: string, requestOptions?: Dubbing.RequestOptions): core.HttpResponsePromise<ElevenLabs.DubbingMetadataResponse>;
    private __get;
    /**
     * Deletes a dubbing project.
     *
     * @param {string} dubbingId - ID of the dubbing project.
     * @param {Dubbing.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.dubbing.delete("dubbing_id")
     */
    delete(dubbingId: string, requestOptions?: Dubbing.RequestOptions): core.HttpResponsePromise<ElevenLabs.DeleteDubbingResponseModel>;
    private __delete;
}
