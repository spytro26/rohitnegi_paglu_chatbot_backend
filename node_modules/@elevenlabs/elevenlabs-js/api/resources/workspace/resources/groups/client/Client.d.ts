/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as ElevenLabs from "../../../../../index";
import { Members } from "../resources/members/client/Client";
export declare namespace Groups {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | environments.ElevenLabsEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Groups {
    protected readonly _options: Groups.Options;
    protected _members: Members | undefined;
    constructor(_options?: Groups.Options);
    get members(): Members;
    /**
     * Searches for user groups in the workspace. Multiple or no groups may be returned.
     *
     * @param {ElevenLabs.workspace.GroupsSearchRequest} request
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.workspace.groups.search({
     *         name: "name"
     *     })
     */
    search(request: ElevenLabs.workspace.GroupsSearchRequest, requestOptions?: Groups.RequestOptions): core.HttpResponsePromise<ElevenLabs.WorkspaceGroupByNameResponseModel[]>;
    private __search;
}
