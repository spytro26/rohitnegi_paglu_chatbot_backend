"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhooksClient = void 0;
const node_crypto_1 = __importDefault(require("node:crypto"));
const errors_1 = require("../errors");
/**
 * A client to handle ElevenLabs webhook-related functionality
 */
class WebhooksClient {
    /**
     * Constructs a webhook event object from a payload and signature.
     * Verifies the webhook signature to ensure the event came from ElevenLabs.
     *
     * @param rawBody - The webhook request body. Must be the raw body, not a JSON object
     * @param sigHeader - The signature header from the request
     * @param secret - Your webhook secret
     * @returns The verified webhook event
     * @throws {ElevenLabsError} if the signature is invalid or missing
     */
    constructEvent(rawBody, sigHeader, secret) {
        var _a;
        if (!sigHeader) {
            throw new errors_1.ElevenLabsError({
                message: 'Missing signature header',
                statusCode: 400,
            });
        }
        if (!secret) {
            throw new errors_1.ElevenLabsError({
                message: 'Webhook secret not configured',
                statusCode: 400,
            });
        }
        const headers = sigHeader.split(',');
        const timestamp = (_a = headers.find((e) => e.startsWith('t='))) === null || _a === void 0 ? void 0 : _a.substring(2);
        const signature = headers.find((e) => e.startsWith('v0='));
        if (!timestamp || !signature) {
            throw new errors_1.ElevenLabsError({
                message: 'No signature hash found with expected scheme v0',
                statusCode: 400,
            });
        }
        // Validate timestamp
        const reqTimestamp = Number(timestamp) * 1000;
        const tolerance = Date.now() - 30 * 60 * 1000;
        if (reqTimestamp < tolerance) {
            throw new errors_1.ElevenLabsError({
                message: 'Timestamp outside the tolerance zone',
                statusCode: 400,
            });
        }
        // Validate hash
        const message = `${timestamp}.${rawBody}`;
        const digest = `v0=${node_crypto_1.default.createHmac('sha256', secret).update(message).digest('hex')}`;
        if (signature !== digest) {
            throw new errors_1.ElevenLabsError({
                message: 'Signature hash does not match the expected signature hash for payload',
                statusCode: 400,
            });
        }
        return JSON.parse(rawBody);
    }
}
exports.WebhooksClient = WebhooksClient;
