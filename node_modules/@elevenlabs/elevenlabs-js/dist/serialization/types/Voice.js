"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Voice = void 0;
const core = __importStar(require("../../core"));
const VoiceSample_1 = require("./VoiceSample");
const VoiceResponseModelCategory_1 = require("./VoiceResponseModelCategory");
const FineTuningResponse_1 = require("./FineTuningResponse");
const VoiceSettings_1 = require("./VoiceSettings");
const VoiceSharingResponse_1 = require("./VoiceSharingResponse");
const VerifiedVoiceLanguageResponseModel_1 = require("./VerifiedVoiceLanguageResponseModel");
const VoiceResponseModelSafetyControl_1 = require("./VoiceResponseModelSafetyControl");
const VoiceVerificationResponse_1 = require("./VoiceVerificationResponse");
exports.Voice = core.serialization.object({
    voiceId: core.serialization.property("voice_id", core.serialization.string()),
    name: core.serialization.string().optional(),
    samples: core.serialization.list(VoiceSample_1.VoiceSample).optional(),
    category: VoiceResponseModelCategory_1.VoiceResponseModelCategory.optional(),
    fineTuning: core.serialization.property("fine_tuning", FineTuningResponse_1.FineTuningResponse.optional()),
    labels: core.serialization.record(core.serialization.string(), core.serialization.string()).optional(),
    description: core.serialization.string().optional(),
    previewUrl: core.serialization.property("preview_url", core.serialization.string().optional()),
    availableForTiers: core.serialization.property("available_for_tiers", core.serialization.list(core.serialization.string()).optional()),
    settings: VoiceSettings_1.VoiceSettings.optional(),
    sharing: VoiceSharingResponse_1.VoiceSharingResponse.optional(),
    highQualityBaseModelIds: core.serialization.property("high_quality_base_model_ids", core.serialization.list(core.serialization.string()).optional()),
    verifiedLanguages: core.serialization.property("verified_languages", core.serialization.list(VerifiedVoiceLanguageResponseModel_1.VerifiedVoiceLanguageResponseModel).optional()),
    safetyControl: core.serialization.property("safety_control", VoiceResponseModelSafetyControl_1.VoiceResponseModelSafetyControl.optional()),
    voiceVerification: core.serialization.property("voice_verification", VoiceVerificationResponse_1.VoiceVerificationResponse.optional()),
    permissionOnResource: core.serialization.property("permission_on_resource", core.serialization.string().optional()),
    isOwner: core.serialization.property("is_owner", core.serialization.boolean().optional()),
    isLegacy: core.serialization.property("is_legacy", core.serialization.boolean().optional()),
    isMixed: core.serialization.property("is_mixed", core.serialization.boolean().optional()),
    createdAtUnix: core.serialization.property("created_at_unix", core.serialization.number().optional()),
});
