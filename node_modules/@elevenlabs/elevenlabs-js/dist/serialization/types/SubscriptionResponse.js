"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionResponse = void 0;
const core = __importStar(require("../../core"));
const SubscriptionResponseModelCurrency_1 = require("./SubscriptionResponseModelCurrency");
const SubscriptionStatusType_1 = require("./SubscriptionStatusType");
const SubscriptionResponseModelBillingPeriod_1 = require("./SubscriptionResponseModelBillingPeriod");
const SubscriptionResponseModelCharacterRefreshPeriod_1 = require("./SubscriptionResponseModelCharacterRefreshPeriod");
exports.SubscriptionResponse = core.serialization.object({
    tier: core.serialization.string(),
    characterCount: core.serialization.property("character_count", core.serialization.number()),
    characterLimit: core.serialization.property("character_limit", core.serialization.number()),
    maxCharacterLimitExtension: core.serialization.property("max_character_limit_extension", core.serialization.number().optional()),
    canExtendCharacterLimit: core.serialization.property("can_extend_character_limit", core.serialization.boolean()),
    allowedToExtendCharacterLimit: core.serialization.property("allowed_to_extend_character_limit", core.serialization.boolean()),
    nextCharacterCountResetUnix: core.serialization.property("next_character_count_reset_unix", core.serialization.number().optional()),
    voiceSlotsUsed: core.serialization.property("voice_slots_used", core.serialization.number()),
    professionalVoiceSlotsUsed: core.serialization.property("professional_voice_slots_used", core.serialization.number()),
    voiceLimit: core.serialization.property("voice_limit", core.serialization.number()),
    maxVoiceAddEdits: core.serialization.property("max_voice_add_edits", core.serialization.number().optional()),
    voiceAddEditCounter: core.serialization.property("voice_add_edit_counter", core.serialization.number()),
    professionalVoiceLimit: core.serialization.property("professional_voice_limit", core.serialization.number()),
    canExtendVoiceLimit: core.serialization.property("can_extend_voice_limit", core.serialization.boolean()),
    canUseInstantVoiceCloning: core.serialization.property("can_use_instant_voice_cloning", core.serialization.boolean()),
    canUseProfessionalVoiceCloning: core.serialization.property("can_use_professional_voice_cloning", core.serialization.boolean()),
    currency: SubscriptionResponseModelCurrency_1.SubscriptionResponseModelCurrency.optional(),
    status: SubscriptionStatusType_1.SubscriptionStatusType,
    billingPeriod: core.serialization.property("billing_period", SubscriptionResponseModelBillingPeriod_1.SubscriptionResponseModelBillingPeriod.optional()),
    characterRefreshPeriod: core.serialization.property("character_refresh_period", SubscriptionResponseModelCharacterRefreshPeriod_1.SubscriptionResponseModelCharacterRefreshPeriod.optional()),
});
