/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as ElevenLabs from "../../../../../../../index";
import { Chunk } from "../resources/chunk/client/Client";
export declare namespace Documents {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | environments.ElevenLabsEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Documents {
    protected readonly _options: Documents.Options;
    protected _chunk: Chunk | undefined;
    constructor(_options?: Documents.Options);
    get chunk(): Chunk;
    /**
     * Create a knowledge base document generated by scraping the given webpage.
     *
     * @param {ElevenLabs.conversationalAi.knowledgeBase.BodyCreateUrlDocumentV1ConvaiKnowledgeBaseUrlPost} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.knowledgeBase.documents.createFromUrl({
     *         url: "url"
     *     })
     */
    createFromUrl(request: ElevenLabs.conversationalAi.knowledgeBase.BodyCreateUrlDocumentV1ConvaiKnowledgeBaseUrlPost, requestOptions?: Documents.RequestOptions): core.HttpResponsePromise<ElevenLabs.AddKnowledgeBaseResponseModel>;
    private __createFromUrl;
    /**
     * Create a knowledge base document generated form the uploaded file.
     *
     * @param {ElevenLabs.conversationalAi.knowledgeBase.BodyCreateFileDocumentV1ConvaiKnowledgeBaseFilePost} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.knowledgeBase.documents.createFromFile({
     *         file: fs.createReadStream("/path/to/your/file")
     *     })
     */
    createFromFile(request: ElevenLabs.conversationalAi.knowledgeBase.BodyCreateFileDocumentV1ConvaiKnowledgeBaseFilePost, requestOptions?: Documents.RequestOptions): core.HttpResponsePromise<ElevenLabs.AddKnowledgeBaseResponseModel>;
    private __createFromFile;
    /**
     * Create a knowledge base document containing the provided text.
     *
     * @param {ElevenLabs.conversationalAi.knowledgeBase.BodyCreateTextDocumentV1ConvaiKnowledgeBaseTextPost} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.knowledgeBase.documents.createFromText({
     *         text: "text"
     *     })
     */
    createFromText(request: ElevenLabs.conversationalAi.knowledgeBase.BodyCreateTextDocumentV1ConvaiKnowledgeBaseTextPost, requestOptions?: Documents.RequestOptions): core.HttpResponsePromise<ElevenLabs.AddKnowledgeBaseResponseModel>;
    private __createFromText;
    /**
     * Get details about a specific documentation making up the agent's knowledge base
     *
     * @param {string} documentationId - The id of a document from the knowledge base. This is returned on document addition.
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.knowledgeBase.documents.get("21m00Tcm4TlvDq8ikWAM")
     */
    get(documentationId: string, requestOptions?: Documents.RequestOptions): core.HttpResponsePromise<ElevenLabs.conversationalAi.knowledgeBase.DocumentsGetResponse>;
    private __get;
    /**
     * Delete a document from the knowledge base
     *
     * @param {string} documentationId - The id of a document from the knowledge base. This is returned on document addition.
     * @param {ElevenLabs.conversationalAi.knowledgeBase.DocumentsDeleteRequest} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.knowledgeBase.documents.delete("21m00Tcm4TlvDq8ikWAM")
     */
    delete(documentationId: string, request?: ElevenLabs.conversationalAi.knowledgeBase.DocumentsDeleteRequest, requestOptions?: Documents.RequestOptions): core.HttpResponsePromise<unknown>;
    private __delete;
    /**
     * Update the name of a document
     *
     * @param {string} documentationId - The id of a document from the knowledge base. This is returned on document addition.
     * @param {ElevenLabs.conversationalAi.knowledgeBase.BodyUpdateDocumentV1ConvaiKnowledgeBaseDocumentationIdPatch} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.knowledgeBase.documents.update("21m00Tcm4TlvDq8ikWAM", {
     *         name: "name"
     *     })
     */
    update(documentationId: string, request: ElevenLabs.conversationalAi.knowledgeBase.BodyUpdateDocumentV1ConvaiKnowledgeBaseDocumentationIdPatch, requestOptions?: Documents.RequestOptions): core.HttpResponsePromise<ElevenLabs.conversationalAi.knowledgeBase.DocumentsUpdateResponse>;
    private __update;
    /**
     * Get a list of agents depending on this knowledge base document
     *
     * @param {string} documentationId - The id of a document from the knowledge base. This is returned on document addition.
     * @param {ElevenLabs.conversationalAi.knowledgeBase.DocumentsGetAgentsRequest} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.knowledgeBase.documents.getAgents("21m00Tcm4TlvDq8ikWAM")
     */
    getAgents(documentationId: string, request?: ElevenLabs.conversationalAi.knowledgeBase.DocumentsGetAgentsRequest, requestOptions?: Documents.RequestOptions): core.HttpResponsePromise<ElevenLabs.GetKnowledgeBaseDependentAgentsResponseModel>;
    private __getAgents;
    /**
     * Get the entire content of a document from the knowledge base
     *
     * @param {string} documentationId - The id of a document from the knowledge base. This is returned on document addition.
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.knowledgeBase.documents.getContent("21m00Tcm4TlvDq8ikWAM")
     */
    getContent(documentationId: string, requestOptions?: Documents.RequestOptions): core.HttpResponsePromise<void>;
    private __getContent;
}
