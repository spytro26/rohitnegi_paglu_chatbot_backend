/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as ElevenLabs from "../../../../../../../index";
export declare namespace Segment {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | environments.ElevenLabsEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Segment {
    protected readonly _options: Segment.Options;
    constructor(_options?: Segment.Options);
    /**
     * Modifies a single segment with new text and/or start/end times. Will update the values for only a specific language of a segment. Does not automatically regenerate the dub.
     *
     * @param {string} dubbingId - ID of the dubbing project.
     * @param {string} segmentId - ID of the segment
     * @param {string} language - ID of the language.
     * @param {ElevenLabs.dubbing.resource.SegmentUpdatePayload} request
     * @param {Segment.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.dubbing.resource.segment.update("dubbing_id", "segment_id", "language")
     */
    update(dubbingId: string, segmentId: string, language: string, request?: ElevenLabs.dubbing.resource.SegmentUpdatePayload, requestOptions?: Segment.RequestOptions): core.HttpResponsePromise<ElevenLabs.SegmentUpdateResponse>;
    private __update;
    /**
     * Deletes a single segment from the dubbing.
     *
     * @param {string} dubbingId - ID of the dubbing project.
     * @param {string} segmentId - ID of the segment
     * @param {Segment.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.dubbing.resource.segment.delete("dubbing_id", "segment_id")
     */
    delete(dubbingId: string, segmentId: string, requestOptions?: Segment.RequestOptions): core.HttpResponsePromise<ElevenLabs.SegmentDeleteResponse>;
    private __delete;
}
