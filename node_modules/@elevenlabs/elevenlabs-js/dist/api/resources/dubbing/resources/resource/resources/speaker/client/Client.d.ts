/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as ElevenLabs from "../../../../../../../index";
import { Segment } from "../resources/segment/client/Client";
export declare namespace Speaker {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | environments.ElevenLabsEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Speaker {
    protected readonly _options: Speaker.Options;
    protected _segment: Segment | undefined;
    constructor(_options?: Speaker.Options);
    get segment(): Segment;
    /**
     * Amend the metadata associated with a speaker, such as their voice. Both voice cloning and using voices from the ElevenLabs library are supported.
     *
     * @param {string} dubbingId - ID of the dubbing project.
     * @param {string} speakerId - ID of the speaker.
     * @param {ElevenLabs.dubbing.resource.BodyUpdateMetadataForASpeakerV1DubbingResourceDubbingIdSpeakerSpeakerIdPatch} request
     * @param {Speaker.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.dubbing.resource.speaker.update("dubbing_id", "speaker_id")
     */
    update(dubbingId: string, speakerId: string, request?: ElevenLabs.dubbing.resource.BodyUpdateMetadataForASpeakerV1DubbingResourceDubbingIdSpeakerSpeakerIdPatch, requestOptions?: Speaker.RequestOptions): core.HttpResponsePromise<ElevenLabs.SpeakerUpdatedResponse>;
    private __update;
    /**
     * Fetch the top 10 similar voices to a speaker, including the voice IDs, names, descriptions, and, where possible, a sample audio recording.
     *
     * @param {string} dubbingId - ID of the dubbing project.
     * @param {string} speakerId - ID of the speaker.
     * @param {Speaker.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.dubbing.resource.speaker.findSimilarVoices("dubbing_id", "speaker_id")
     */
    findSimilarVoices(dubbingId: string, speakerId: string, requestOptions?: Speaker.RequestOptions): core.HttpResponsePromise<ElevenLabs.SimilarVoicesForSpeakerResponse>;
    private __findSimilarVoices;
}
